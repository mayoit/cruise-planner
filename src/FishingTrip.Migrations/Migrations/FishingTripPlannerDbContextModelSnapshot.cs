// <auto-generated />
using System;
using System.Text.Json;
using FishingTrip.Domain.DetailedDomains;
using FishingTrip.Infrastructure.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FishingTrip.Migrations.Migrations
{
    [DbContext(typeof(FishingTripPlannerDbContext))]
    partial class FishingTripPlannerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.6.22329.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FishingTrip.Domain.FishingTripDomain.Boat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OperatingPortPortId")
                        .HasColumnType("integer");

                    b.Property<JsonDocument>("Profile")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("OperatingPortPortId");

                    b.ToTable("Boats");
                });

            modelBuilder.Entity("FishingTrip.Domain.FishingTripDomain.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("BookedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookedByUserId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("FishingTrip.Domain.FishingTripDomain.Port", b =>
                {
                    b.Property<int>("PortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PortId"));

                    b.Property<string>("CityName")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PortId");

                    b.ToTable("Port");
                });

            modelBuilder.Entity("FishingTrip.Domain.FishingTripDomain.Profile", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<long?>("DefaultUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<UserProfile>("ProfileDetails")
                        .HasColumnType("jsonb");

                    b.HasKey("PhoneNumber");

                    b.HasIndex("DefaultUserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("FishingTrip.Domain.FishingTripDomain.TripMember", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying(15)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("PhoneNumber", "Role");

                    b.HasIndex("UserId");

                    b.ToTable("TripMember");
                });

            modelBuilder.Entity("FishingTrip.Domain.FishingTripDomain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FishingTrip.Domain.FishingTripDomain.Boat", b =>
                {
                    b.HasOne("FishingTrip.Domain.FishingTripDomain.Port", "OperatingPort")
                        .WithMany()
                        .HasForeignKey("OperatingPortPortId");

                    b.Navigation("OperatingPort");
                });

            modelBuilder.Entity("FishingTrip.Domain.FishingTripDomain.Booking", b =>
                {
                    b.HasOne("FishingTrip.Domain.FishingTripDomain.User", "BookedByUser")
                        .WithMany("Bookings")
                        .HasForeignKey("BookedByUserId");

                    b.Navigation("BookedByUser");
                });

            modelBuilder.Entity("FishingTrip.Domain.FishingTripDomain.Profile", b =>
                {
                    b.HasOne("FishingTrip.Domain.FishingTripDomain.User", "DefaultUser")
                        .WithOne("Profile")
                        .HasForeignKey("FishingTrip.Domain.FishingTripDomain.Profile", "DefaultUserId");

                    b.Navigation("DefaultUser");
                });

            modelBuilder.Entity("FishingTrip.Domain.FishingTripDomain.TripMember", b =>
                {
                    b.HasOne("FishingTrip.Domain.FishingTripDomain.Profile", "Profile")
                        .WithMany("Trips")
                        .HasForeignKey("PhoneNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingTrip.Domain.FishingTripDomain.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("UserId");

                    b.Navigation("Profile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FishingTrip.Domain.FishingTripDomain.Profile", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("FishingTrip.Domain.FishingTripDomain.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
